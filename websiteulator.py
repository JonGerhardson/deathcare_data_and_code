# loads a csv file into an interactive html data dashboard 

import pandas as pd
import os
import json
import re
from datetime import datetime
import webbrowser

def create_analysis_data():
    """
    Loads and cleans the pre-merged funeral home data, calculates price changes,
    and prepares it for the HTML dashboard.
    """
    filepath = 'oct10-fh-data.csv'

    if not os.path.exists(filepath):
        print(f"Error: The required data file was not found: {filepath}")
        return None

    try:
        df = pd.read_csv(filepath, sep=',', encoding='utf-8', dtype={'Ownership': str})
    except Exception as e:
        print(f"Error reading {filepath}: {e}")
        return None

    # --- Column Name Standardization ---
    rename_map = {}
    for col in df.columns:
        clean_col = col.strip()
        new_col_name = re.sub(r'[^a-zA-Z0-9_]', '', clean_col.replace(" ", ""))
        rename_map[col] = new_col_name
    
    df.rename(columns=rename_map, inplace=True)
    
    # --- Data Cleaning for Price Columns ---
    price_columns = [col for col in df.columns if any(keyword in col for keyword in ['Fee', 'Price', 'Cost', 'Rate', 'Casket', 'Vault', 'Embalming'])]
    for col in price_columns:
        if col in df.columns:
            df[col] = df[col].astype(str).str.replace(r'[$,]', '', regex=True)
            df[col] = pd.to_numeric(df[col], errors='coerce')
    
    # --- Feature Engineering & Analysis Calculations ---
    if 'LicenseIssueDate' in df.columns:
        license_dates = pd.to_datetime(df['LicenseIssueDate'], errors='coerce')
        df['IsNewLicense'] = license_dates >= pd.to_datetime('2020-01-01')
        df['IsNewLicense'] = df['IsNewLicense'].fillna(False)
    else:
        df['IsNewLicense'] = False

    if 'Town' not in df.columns and 'City' in df.columns:
        df['Town'] = df['City']
    elif 'Town' not in df.columns:
        df['Town'] = 'N/A'

    columns_to_track = [
        'ImmediateBurial', 'DirectCremation', 'BasicServiceFee',
        'Embalming', 'LeastCostCasket', 'LeastCostVault'
    ]

    for col in columns_to_track:
        p20, p22, p24 = f'{col}_2020', f'{col}_2022', f'{col}_2024'
        df[f'{col}_Pct_Change'] = pd.NA
        df[f'{col}_Change_Base_Year'] = pd.NA

        if p20 in df.columns and p24 in df.columns:
            mask_2020 = df[p20].notna() & df[p24].notna()
            df.loc[mask_2020, f'{col}_Change_Base_Year'] = 2020
            change = df.loc[mask_2020, p24] - df.loc[mask_2020, p20]
            base = df.loc[mask_2020, p20].replace(0, pd.NA)
            df.loc[mask_2020, f'{col}_Pct_Change'] = (change / base) * 100

        if p22 in df.columns and p24 in df.columns:
            mask_2022 = df[f'{col}_Change_Base_Year'].isna() & df[p22].notna() & df[p24].notna()
            df.loc[mask_2022, f'{col}_Change_Base_Year'] = 2022
            change = df.loc[mask_2022, p24] - df.loc[mask_2022, p22]
            base = df.loc[mask_2022, p22].replace(0, pd.NA)
            df.loc[mask_2022, f'{col}_Pct_Change'] = (change / base) * 100

    object_cols = df.select_dtypes(include=['object']).columns
    df[object_cols] = df[object_cols].fillna('N/A')
            
    return df.to_dict(orient='records')

def generate_html_dashboard(analysis_data):
    """
    Generates the HTML dashboard file with embedded JSON data.
    """
    if not analysis_data:
        print("No data available to generate dashboard.")
        return

    json_data = json.dumps(analysis_data, indent=4, default=lambda x: None if pd.isna(x) else x)
    
    current_date = datetime.now().strftime("%B %d, %Y")
    
    readme_content = f"""
# License
tk all rights reserved jonathan gerhardson 2025

# Data Column Explanations
This document provides an explanation for each column in the `funeral_home_pricing_final.csv` dataset and the derivative data generated by the analysis script.
(Full README content omitted for brevity)
"""
    json_readme = json.dumps(readme_content)

    html_template = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Funeral Home Price Analysis</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Oswald:wght@400&family=Roboto+Condensed:wght@400;700&family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <style>
        body {{ 
            font-family: 'Roboto', sans-serif; 
            font-size: 18px;
            color: black;
        }}
        h1, h2, h3, h4 {{ 
            font-family: 'Roboto Condensed', sans-serif; 
            font-size: 24px;
            color: black;
        }}
        .button-style {{
            background-color: black;
            color: white;
            font-family: 'Oswald', sans-serif;
            font-weight: 400; /* Regular */
            transition: background-color 0.3s;
        }}
        .button-style:hover {{
            background-color: #333; /* Dark gray on hover */
        }}
        .view-toggle button {{
            font-family: 'Oswald', sans-serif;
            font-weight: 400;
            background-color: white; /* Unfocused state */
            color: black; /* Unfocused state */
            border: 1px solid black;
        }}
        .view-toggle button.active {{
            background-color: black; /* Focused/Active state */
            color: white;
        }}
        .card-enter {{ animation: fadeIn 0.5s ease-out; }}
        @keyframes fadeIn {{ 
            from {{ opacity: 0; transform: translateY(20px); }} 
            to {{ opacity: 1; transform: translateY(0); }} 
        }}
    </style>
</head>
<body class="bg-gray-50 text-gray-900">

    <div class="container mx-auto p-4 md:p-8">
        <header class="mb-8 flex justify-between items-center">
            <div>
                <h1 class="text-4xl font-bold">TESTING DO NOT USE. SHIELD THINE EYES. LOOK AWAY. Funeral Home Price Analysis</h1>
                <p class="text-lg mt-2">Comparing prices from 2020, 2022, and 2024</p>
            </div>
            <button id="download-btn" class="button-style px-4 py-2 rounded-lg shadow">
                Download ZIP
            </button>
        </header>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-8 p-4 bg-white rounded-lg shadow-sm sticky top-0 z-10">
            <div>
                <label for="search" class="text-sm font-medium">Search</label>
                <input type="text" id="search" placeholder="Name or town..." class="mt-1 block w-full p-2 border-gray-300 rounded-md shadow-sm">
            </div>
            <div>
                <label for="county" class="text-sm font-medium">County</label>
                <select id="county" class="mt-1 block w-full p-2 border-gray-300 rounded-md shadow-sm">
                    <option value="all">All Counties</option>
                </select>
            </div>
            <div>
                <label for="ownership" class="text-sm font-medium">Ownership</label>
                <select id="ownership" class="mt-1 block w-full p-2 border-gray-300 rounded-md shadow-sm">
                    <option value="all">All Types</option>
                </select>
            </div>
            <div>
                <label for="sort" class="text-sm font-medium">Sort By</label>
                <select id="sort" class="mt-1 block w-full p-2 border-gray-300 rounded-md shadow-sm">
                    <option value="name_asc">Name (A-Z)</option>
                    <option value="change_desc">Highest % Increase</option>
                    <option value="price_desc">Highest 2024 Price</option>
                </select>
            </div>
            <div>
                <label for="metric" class="text-sm font-medium">Metric</label>
                <select id="metric" class="mt-1 block w-full p-2 border-gray-300 rounded-md shadow-sm">
                    <option value="DirectCremation">Direct Cremation</option>
                    <option value="ImmediateBurial">Immediate Burial</option>
                    <option value="BasicServiceFee">Basic Service Fee</option>
                    <option value="Embalming">Embalming</option>
                    <option value="LeastCostCasket">Least Cost Casket</option>
                    <option value="LeastCostVault">Least Cost Vault</option>
                </select>
            </div>
        </div>
        
        <div class="flex justify-center mb-4 view-toggle">
             <button id="grid-view-btn" class="px-4 py-2 rounded-l-lg active">Grid View</button>
             <button id="chart-view-btn" class="px-4 py-2 rounded-r-lg">Chart View</button>
        </div>

        <div id="grid-container" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6"></div>
        <div id="chart-container" class="hidden bg-white p-4 rounded-lg shadow">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <div>
                    <h3 id="county-chart-title" class="text-2xl font-semibold mb-2 text-center">Average Price by County</h3>
                    <canvas id="county-chart"></canvas>
                </div>
                <div>
                    <h3 id="ownership-chart-title" class="text-2xl font-semibold mb-2 text-center">Average Price by Ownership</h3>
                    <canvas id="ownership-chart"></canvas>
                </div>
            </div>
             <div class="mt-8">
                <h3 id="trend-chart-title" class="text-2xl font-semibold mb-2 text-center">Average Price Trend (2020-2024)</h3>
                <canvas id="trend-chart"></canvas>
            </div>
        </div>
        <div id="no-results" class="hidden text-center py-16"><h3 class="text-2xl">No Results Found</h3></div>
    </div>

    <div id="details-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 overflow-auto">
        <div id="modal-content" class="bg-white rounded-lg shadow-xl p-8 max-w-2xl w-full"></div>
    </div>

     <footer class="bg-gray-100 text-gray-600 text-xs mt-12 py-8">
         <div class="container mx-auto px-4 md:px-8">
            <h4 class="font-semibold text-base mb-2">Disclaimer</h4>
            <p class="mb-4 text-sm">
                Pricing data courtesy of the Funeral Consumer Alliance of Western Massachusetts. 2024 data was taken from each businesses General Price List, 2020 and 2022 data used charts compiled by the Funeral Consumer Alliance. Prices may not out of date, and are for educational purposes only. Under state and federal law, funeral homes are required to provide their most current prices upon request.
            </p>
            <p class="mb-4 text-sm">
                Ownership data was primarily obtained from the Massachusetts Board of Registration in Embalming and Funeral Directing except for in the case of Carriage Services the FCA's data was used, because this was not recorded on the Establishment License for those businesses. Chains of two or less funeral homes are classified as Independent/Family Owned in this data in contrast to funeral homes that are owned in part or wholly by corporate entities that also own funeral homes in other states. There is no distinction of "Independent/Family Owned" on state issued licenses, and this distinction is not intended to imply any value judgement. This dashboard does not endorse or prefer any funeral home business.
            </p>
            <p class="text-sm">
                🏷️ is used to denote a new Establishment Lisence was issued between 2020 and 2024, possibly signaling that the funeral home came under new ownership.
            </p>
        </div>
    </footer>

    <script>
        let analysisData = {json_data};
        const readmeContent = {json_readme};
        let currentFilteredData = [];
        
        const searchInput = document.getElementById('search');
        const countySelect = document.getElementById('county');
        const ownershipSelect = document.getElementById('ownership');
        const sortSelect = document.getElementById('sort');
        const metricSelect = document.getElementById('metric');
        const gridBtn = document.getElementById('grid-view-btn');
        const chartBtn = document.getElementById('chart-view-btn');
        const downloadBtn = document.getElementById('download-btn');
        const gridContainer = document.getElementById('grid-container');
        const chartContainer = document.getElementById('chart-container');
        const noResults = document.getElementById('no-results');
        const modal = document.getElementById('details-modal');
        const modalContent = document.getElementById('modal-content');

        let countyChart, ownershipChart, trendChart;

        function setupFilters() {{
            const counties = [...new Set(analysisData.map(item => item.County))].filter(c => c && c !== 'N/A').sort();
            counties.forEach(c => countySelect.innerHTML += `<option value="${{c}}">${{c}}</option>`);
            
            const owners = [...new Set(analysisData.map(item => item.Ownership))].filter(o => o && o !== 'N/A').sort();
            owners.forEach(o => ownershipSelect.innerHTML += `<option value="${{o}}">${{o}}</option>`);
        }}

        function formatCurrency(value) {{
            return (value === null || isNaN(value)) ? 'N/A' : Number(value).toLocaleString('en-US', {{ style: 'currency', currency: 'USD', maximumFractionDigits: 0 }});
        }}

        function render() {{
            const searchTerm = searchInput.value.toLowerCase();
            const county = countySelect.value;
            const ownership = ownershipSelect.value;
            const sortBy = sortSelect.value;
            const metric = metricSelect.value;

            let filtered = analysisData.filter(item => 
                ((item.FuneralHome || '').toLowerCase().includes(searchTerm) || (item.Town || '').toLowerCase().includes(searchTerm)) &&
                (county === 'all' || item.County === county) &&
                (ownership === 'all' || item.Ownership === ownership)
            );
            
            // A more robust sorting implementation
            filtered.sort((a, b) => {{
                let valA, valB;

                if (sortBy === 'price_desc') {{
                    valA = a[metric + '_2024'];
                    valB = b[metric + '_2024'];
                }} else if (sortBy === 'change_desc') {{
                    valA = a[metric + '_Pct_Change'];
                    valB = b[metric + '_Pct_Change'];
                }} else {{
                    // Default to name sort (ascending)
                    return (a.FuneralHome || '').localeCompare(b.FuneralHome || '');
                }}

                // Handle null, undefined, or non-numeric values by treating them as the lowest possible value
                const numA = (valA === null || isNaN(valA)) ? -Infinity : Number(valA);
                const numB = (valB === null || isNaN(valB)) ? -Infinity : Number(valB);

                // For descending order, we want larger numbers first
                if (numB > numA) return 1;
                if (numB < numA) return -1;
                
                // If numbers are equal, maintain a stable sort by name
                return (a.FuneralHome || '').localeCompare(b.FuneralHome || '');
            }});
            
            currentFilteredData = filtered;
            noResults.classList.toggle('hidden', currentFilteredData.length > 0);
            
            renderGridView(currentFilteredData, metric);
            renderChartView(currentFilteredData, metric);
        }}
        
        function renderGridView(data, metric) {{
            if (gridContainer.classList.contains('hidden')) return;
            gridContainer.innerHTML = '';
            data.forEach(item => {{
                const card = document.createElement('div');
                const pctChange = item[metric + '_Pct_Change'];
                
                let pctChangeColor = 'text-gray-900';
                if (typeof pctChange === 'number') {{
                    if (pctChange > 10) pctChangeColor = 'text-red-500';
                    else if (pctChange < 0) pctChangeColor = 'text-green-500';
                    else if (pctChange >= 0) pctChangeColor = 'text-yellow-600';
                }}

                const newLicenseIndicator = item.IsNewLicense ? ' 🏷️' : '';
                
                card.className = `bg-white rounded-lg shadow p-6 card-enter cursor-pointer`; 
                
                card.innerHTML = `
                    <h3 class="text-xl font-bold">${{item.FuneralHome}}${{newLicenseIndicator}}</h3>
                    <p class="text-base">${{item.Town || 'N/A'}}, ${{item.County || 'N/A'}}</p>
                    <p class="text-base font-semibold mt-1">${{item.Ownership || 'N/A'}}</p>
                    <div class="flex justify-between items-center mt-4">
                        <div>
                            <p class="text-sm">2024 Price</p>
                            <p class="text-2xl font-semibold text-indigo-600">${{formatCurrency(item[metric + '_2024'])}}</p>
                        </div>
                        <div>
                             <p class="text-sm">${{item[metric + '_Change_Base_Year'] || ''}} - 2024 Change</p>
                             <p class="text-2xl font-semibold ${{pctChangeColor}}">${{(pctChange === null || isNaN(pctChange)) ? 'N/A' : `${{pctChange.toFixed(1)}}%`}}</p>
                        </div>
                    </div>
                `;
                card.onclick = () => showDetails(item);
                gridContainer.appendChild(card);
            }});
        }}

        function renderChartView(data, metric) {{
            if (chartContainer.classList.contains('hidden')) return;

            const metricText = metricSelect.options[metricSelect.selectedIndex].text;
            document.getElementById('county-chart-title').innerText = `Average ${{metricText}} by County (2024)`;
            document.getElementById('ownership-chart-title').innerText = `Average ${{metricText}} by Ownership (2024)`;
            document.getElementById('trend-chart-title').innerText = `Average ${{metricText}} Price Trend (2020-2024)`;

            // County Chart
            const countyData = data.reduce((acc, item) => {{
                if (item.County !== 'N/A' && item.County !== 'Worcester' && item[metric + '_2024'] !== null && !isNaN(item[metric + '_2024'])) {{
                    if (!acc[item.County]) acc[item.County] = {{ total: 0, count: 0 }};
                    acc[item.County].total += item[metric + '_2024'];
                    acc[item.County].count++;
                }}
                return acc;
            }}, {{}});
            const countyLabels = Object.keys(countyData).sort();
            const countyAvgs = countyLabels.map(c => countyData[c].total / countyData[c].count);
            
            if (countyChart) countyChart.destroy();
            countyChart = new Chart(document.getElementById('county-chart'), {{ type: 'bar', data: {{ labels: countyLabels, datasets: [{{ backgroundColor: '#4f46e5', data: countyAvgs, label: `Avg. 2024 ${{metricText}}` }}] }} }});

            // Ownership Chart
            const ownerData = data.reduce((acc, item) => {{
                if (item.Ownership !== 'N/A' && item[metric + '_2024'] !== null && !isNaN(item[metric + '_2024'])) {{
                    if (!acc[item.Ownership]) acc[item.Ownership] = {{ total: 0, count: 0 }};
                    acc[item.Ownership].total += item[metric + '_2024'];
                    acc[item.Ownership].count++;
                }}
                return acc;
            }}, {{}});
            const ownerLabels = Object.keys(ownerData).sort();
            const ownerAvgs = ownerLabels.map(o => ownerData[o].total / ownerData[o].count);
            
            if (ownershipChart) ownershipChart.destroy();
            ownershipChart = new Chart(document.getElementById('ownership-chart'), {{ type: 'bar', data: {{ labels: ownerLabels, datasets: [{{ backgroundColor: '#818cf8', data: ownerAvgs, label: `Avg. 2024 ${{metricText}}` }}] }} }});

            // Trend Chart
            const trendData = ['2020', '2022', '2024'].map(year => {{
                const yearMetric = `${{metric}}_${{year}}`;
                const validItems = data.filter(item => item[yearMetric] !== null && !isNaN(item[yearMetric]));
                const total = validItems.reduce((sum, item) => sum + item[yearMetric], 0);
                return validItems.length > 0 ? total / validItems.length : 0;
            }});
            
            if (trendChart) trendChart.destroy();
            trendChart = new Chart(document.getElementById('trend-chart'), {{
                type: 'line', 
                data: {{ 
                    labels: ['2020', '2022', '2024'], 
                    datasets: [{{ 
                        label: `Average ${{metricText}} Price`,
                        borderColor: '#10b981', 
                        tension: 0.1,
                        data: trendData
                    }}] 
                }}
            }});
        }}
        
        function showDetails(item) {{
            modal.classList.remove('hidden');
            modal.classList.add('flex');
            let content = `<h2 class="text-2xl font-bold mb-4">${{item.FuneralHome}}</h2>`;
            content += `<p class="text-lg mb-2">${{item.Address || 'N/A'}}, ${{item.Town || 'N/A'}}, ${{item.County || 'N/A'}}</p>`;
            
            const licenseNumber = item.EstablishmentLicense;
            if (licenseNumber && licenseNumber !== 'N/A') {{
                const url = `https://elicensing21.mass.gov/CitizenAccess/GeneralProperty/LicenseeDetail.aspx?LicenseeNumber=${{licenseNumber}}&LicenseeType=Funeral+Establishment+License`;
                content += `<p class="text-base mb-1"><a href="${{url}}" target="_blank" class="text-indigo-600 hover:underline"><strong>State License:</strong> ${{licenseNumber}}</a></p>`;
            }} else {{
                content += `<p class="text-base mb-1"><strong>State License:</strong> N/A</p>`;
            }}

            content += `<p class="text-base mb-1"><strong>Director(s):</strong> ${{item.Type3DirectorNames || 'N/A'}}</p>`;
            content += `<p class="text-base mb-4"><strong>License Issue Date:</strong> ${{item.LicenseIssueDate || 'N/A'}}</p>`;
            
            content += '<div class="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4">';
            ['DirectCremation', 'ImmediateBurial', 'BasicServiceFee', 'Embalming', 'LeastCostCasket', 'LeastCostVault'].forEach(m => {{
                 content += `<div><h4 class="text-xl font-semibold">${{m.replace(/([A-Z])/g, ' $1').trim()}}</h4>`;
                 ['2020', '2022', '2024'].forEach(year => {{
                     const price = item[`${{m}}_${{year}}`];
                     content += `<p class="text-base">${{year}}: ${{formatCurrency(price)}}</p>`;
                 }});
                 content += '</div>';
            }});
            content += '</div> <button id="close-modal" class="button-style mt-6 px-4 py-2 rounded-lg">Close</button>';
            modalContent.innerHTML = content;
            document.getElementById('close-modal').onclick = closeModal;
        }}
        
        function closeModal() {{
            modal.classList.add('hidden');
            modal.classList.remove('flex');
        }}
        
        function downloadData() {{
            if (currentFilteredData.length === 0) {{
                alert("No data to download. Please adjust your filters.");
                return;
            }}
            
            const headers = Object.keys(currentFilteredData[0]);
            let csvContent = headers.join(",") + "\\n";

            currentFilteredData.forEach(item => {{
                const row = headers.map(header => {{
                    let cell = item[header] === null || item[header] === undefined ? '' : `"${{String(item[header]).replace(/"/g, '""')}}"`;
                    return cell;
                }});
                csvContent += row.join(",") + "\\n";
            }});

            const zip = new JSZip();
            zip.file("funeral_home_data.csv", csvContent);
            zip.file("Readme.md", readmeContent);

            zip.generateAsync({{type:"blob"}}).then(function(content) {{
                const link = document.createElement("a");
                const url = URL.createObjectURL(content);
                link.setAttribute("href", url);
                link.setAttribute("download", "funeral_home_data.zip");
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }});
        }}

        function switchView(view) {{
            gridContainer.classList.toggle('hidden', view !== 'grid');
            chartContainer.classList.toggle('hidden', view !== 'chart');
            [gridBtn, chartBtn].forEach(btn => btn.classList.remove('active'));
            document.getElementById(`${{view}}-view-btn`).classList.add('active');
            render();
        }}
        
        // Event Listeners
        gridBtn.onclick = () => switchView('grid');
        chartBtn.onclick = () => switchView('chart');
        downloadBtn.onclick = downloadData;
        modal.addEventListener('click', (event) => {{
             if (event.target === modal) {{
                closeModal();
            }}
        }});
        
        [searchInput, countySelect, ownershipSelect, sortSelect, metricSelect].forEach(el => el.addEventListener('change', render));
        searchInput.addEventListener('input', render);
        
        // Initial setup
        setupFilters();
        switchView('grid');
    </script>
</body>
</html>
    """
    
    with open('price_analysis_dashboard.html', 'w', encoding='utf-8') as f:
        f.write(html_template)
    print("Dashboard has been generated: price_analysis_dashboard.html")

def main():
    """
    Main function to run the entire analysis pipeline.
    """
    dict_data = create_analysis_data()
    
    if dict_data is not None:
        generate_html_dashboard(dict_data)
        
        dashboard_path = 'price_analysis_dashboard.html'
        print(f"\nAnalysis complete. Opening '{dashboard_path}' in your web browser...")
        if os.path.exists(dashboard_path):
            webbrowser.open('file://' + os.path.realpath(dashboard_path))

if __name__ == '__main__':
    main()

